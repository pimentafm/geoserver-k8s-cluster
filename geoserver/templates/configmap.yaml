apiVersion: v1
kind: ConfigMap
metadata:
  name: geoserver-server-xml
  labels:
    app.kubernetes.io/name: geoserver
data:
  server.xml: |
    <?xml version="1.0" encoding="UTF-8"?>
    <!--
      Licensed to the Apache Software Foundation (ASF) under one or more
      contributor license agreements.  See the NOTICE file distributed with
      this work for additional information regarding copyright ownership.
      The ASF licenses this file to You under the Apache License, Version 2.0
      (the "License"); you may not use this file except in compliance with
      the License.  You may obtain a copy of the License at
    
          http://www.apache.org/licenses/LICENSE-2.0
    
      Unless required by applicable law or agreed to in writing, software
      distributed under the License is distributed on an "AS IS" BASIS,
      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      See the License for the specific language governing permissions and
      limitations under the License.
    -->
    <!-- Note:  A "Server" is not itself a "Container", so you may not
         define subcomponents such as "Valves" at this level.
         Documentation at /docs/config/server.html
     -->
    <Server port="8005" shutdown="SHUTDOWN">
      <Listener className="org.apache.catalina.startup.VersionLoggerListener" />
      <!-- Security listener. Documentation at /docs/config/listeners.html
      <Listener className="org.apache.catalina.security.SecurityListener" />
      -->
      <!-- APR library loader. Documentation at /docs/apr.html -->
      <Listener className="org.apache.catalina.core.AprLifecycleListener" SSLEngine="on" />
      <!-- Prevent memory leaks due to use of particular java/javax APIs-->
      <Listener className="org.apache.catalina.core.JreMemoryLeakPreventionListener" />
      <Listener className="org.apache.catalina.mbeans.GlobalResourcesLifecycleListener" />
      <Listener className="org.apache.catalina.core.ThreadLocalLeakPreventionListener" />
    
      <!-- Global JNDI resources
           Documentation at /docs/jndi-resources-howto.html
      -->
      <GlobalNamingResources>
        <!-- Editable user database that can also be used by
             UserDatabaseRealm to authenticate users
        -->
        <Resource name="UserDatabase" auth="Container"
                  type="org.apache.catalina.UserDatabase"
                  description="User database that can be updated and saved"
                  factory="org.apache.catalina.users.MemoryUserDatabaseFactory"
                  pathname="conf/tomcat-users.xml" />
      </GlobalNamingResources>
    
      <!-- A "Service" is a collection of one or more "Connectors" that share
           a single "Container" Note:  A "Service" is not itself a "Container",
           so you may not define subcomponents such as "Valves" at this level.
           Documentation at /docs/config/service.html
       -->
      <Service name="Catalina">
    
        <!--The connectors can use a shared executor, you can define one or more named thread pools-->
        <!--
        <Executor name="tomcatThreadPool" namePrefix="catalina-exec-"
            maxThreads="150" minSpareThreads="4"/>
        -->
    
    
        <!-- A "Connector" represents an endpoint by which requests are received
             and responses are returned. Documentation at :
             Java HTTP Connector: /docs/config/http.html
             Java AJP  Connector: /docs/config/ajp.html
             APR (HTTP/AJP) Connector: /docs/apr.html
             Define a non-SSL/TLS HTTP/1.1 Connector on port 8080
        -->
        <Connector port="8080" protocol="HTTP/1.1"
                   connectionTimeout="20000"
                   redirectPort="8443" />
        <!-- A "Connector" using the shared thread pool-->
        <!--
        <Connector executor="tomcatThreadPool"
                   port="8080" protocol="HTTP/1.1"
                   connectionTimeout="20000"
                   redirectPort="8443" />
        -->
        <!-- Define an SSL/TLS HTTP/1.1 Connector on port 8443
             This connector uses the NIO implementation. The default
             SSLImplementation will depend on the presence of the APR/native
             library and the useOpenSSL attribute of the
             AprLifecycleListener.
             Either JSSE or OpenSSL style configuration may be used regardless of
             the SSLImplementation selected. JSSE style configuration is used below.
        -->
        <!--
        <Connector port="8443" protocol="org.apache.coyote.http11.Http11NioProtocol"
                   maxThreads="150" SSLEnabled="true">
            <SSLHostConfig>
                <Certificate certificateKeystoreFile="conf/localhost-rsa.jks"
                             type="RSA" />
            </SSLHostConfig>
        </Connector>
        -->
        <!-- Define an SSL/TLS HTTP/1.1 Connector on port 8443 with HTTP/2
             This connector uses the APR/native implementation which always uses
             OpenSSL for TLS.
             Either JSSE or OpenSSL style configuration may be used. OpenSSL style
             configuration is used below.
        -->
        <!--
        <Connector port="8443" protocol="org.apache.coyote.http11.Http11AprProtocol"
                   maxThreads="150" SSLEnabled="true" >
            <UpgradeProtocol className="org.apache.coyote.http2.Http2Protocol" />
            <SSLHostConfig>
                <Certificate certificateKeyFile="conf/localhost-rsa-key.pem"
                             certificateFile="conf/localhost-rsa-cert.pem"
                             certificateChainFile="conf/localhost-rsa-chain.pem"
                             type="RSA" />
            </SSLHostConfig>
        </Connector>
        -->
    
        <!-- Define an AJP 1.3 Connector on port 8009 -->
        <!-- <Connector protocol="AJP/1.3"
                   address="::1"
                   port="8009"
                   redirectPort="8443" />
        -->
        <!-- An Engine represents the entry point (within Catalina) that processes
             every request.  The Engine implementation for Tomcat stand alone
             analyzes the HTTP headers included with the request, and passes them
             on to the appropriate Host (virtual host).
             Documentation at /docs/config/engine.html -->
    
        <!-- You should set jvmRoute to support load-balancing via AJP ie :
        <Engine name="Catalina" defaultHost="localhost" jvmRoute="jvm1">
        -->
        <Engine name="Catalina" defaultHost="localhost">
    
          <!--For clustering, please take a look at documentation at:
              /docs/cluster-howto.html  (simple how to)
              /docs/config/cluster.html (reference documentation) -->
          <!--
          <Cluster className="org.apache.catalina.ha.tcp.SimpleTcpCluster"/>
          -->
    
          <!-- Use the LockOutRealm to prevent attempts to guess user passwords
               via a brute-force attack -->
          <Realm className="org.apache.catalina.realm.LockOutRealm">
            <!-- This Realm uses the UserDatabase configured in the global JNDI
                 resources under the key "UserDatabase".  Any edits
                 that are performed against this UserDatabase are immediately
                 available for use by the Realm.  -->
            <Realm className="org.apache.catalina.realm.UserDatabaseRealm"
                   resourceName="UserDatabase"/>
          </Realm>
    
          <Host name="localhost"  appBase="webapps"
                unpackWARs="true" autoDeploy="true">
    
            <!-- SingleSignOn valve, share authentication between web applications
                 Documentation at: /docs/config/valve.html -->
            <!--
            <Valve className="org.apache.catalina.authenticator.SingleSignOn" />
            -->
    
            <!-- Access log processes all example.
                 Documentation at: /docs/config/valve.html
                 Note: The pattern used is equivalent to using pattern="common" -->
            <Valve className="org.apache.catalina.valves.AccessLogValve" directory="logs"
                   prefix="localhost_access_log" suffix=".txt"
                   pattern="%h %l %u %t &quot;%r&quot; %s %b" />
    
          </Host>
        </Engine>
      </Service>
    </Server>
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: geoserver-web-xml
  labels:
    app.kubernetes.io/name: geoserver
data:
  web.xml: |
     <?xml version="1.0" encoding="UTF-8"?>
     <web-app
        xmlns="http://xmlns.jcp.org/xml/ns/javaee"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"
        metadata-complete="false"
        version="3.1">
     
          <display-name>GeoServer</display-name>

          <context-param>
               <param-name>serviceStrategy</param-name>
               <!-- Meaning of the different values :

                    PARTIAL-BUFFER2
                    - Partially buffers the first xKb to disk. Once that has buffered, the 
                         result is streamed to the user. This will allow for most errors to be caught
                         early.

                    BUFFER
                    - stores the entire response in memory first, before sending it off to
                         the user (may run out of memory)

                    SPEED
                    - outputs directly to the response (and cannot recover in the case of an
                         error)

                    FILE
                    - outputs to the local filesystem first, before sending it off to the user
                    -->
               <param-value>PARTIAL-BUFFER2</param-value>
          </context-param>

          <context-param>
               <!-- see comments on the PARTIAL-BUFFER strategy -->
               <!-- this sets the size of the buffer.  default is "50" = 50kb -->

               <param-name>PARTIAL_BUFFER_STRATEGY_SIZE</param-name>
               <param-value>50</param-value>
          </context-param>

          <!--Can be true or false (defaults to: false). -->
          <!--When true the JSONP (text/javascript) output format is enabled -->
          <!--
          <context-param>
               <param-name>ENABLE_JSONP</param-name>
               <param-value>true</param-value>
          </context-param>
          -->
          <context-param>
               <param-name>PROXY_BASE_URL</param-name>
               <param-value>http://localhost:8080/geoserver</param-value>
          </context-param>

          <context-param>
               <param-name>GEOSERVER_DATA_DIR</param-name>
               <param-value>/var/geoserver/datadir</param-value>
          </context-param>

          <!-- pick up all spring application contexts -->
          <context-param>
               <param-name>contextConfigLocation</param-name>
               <param-value>classpath*:/applicationContext.xml classpath*:/applicationSecurityContext.xml</param-value>
          </context-param>

          <filter>
               <filter-name>FlushSafeFilter</filter-name>
               <filter-class>org.geoserver.filters.FlushSafeFilter</filter-class>
          </filter>

          <filter>
               <filter-name>Set Character Encoding</filter-name>
               <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
               <init-param>
                    <param-name>encoding</param-name>
                    <param-value>UTF-8</param-value>
               </init-param>
          </filter>

          <filter>
               <filter-name>SessionDebugger</filter-name>
               <filter-class>org.geoserver.filters.SessionDebugFilter</filter-class>
          </filter>

          <filter>
               <filter-name>filterChainProxy</filter-name>
               <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
          </filter>

          <filter>
               <filter-name>xFrameOptionsFilter</filter-name>
               <filter-class>org.geoserver.filters.XFrameOptionsFilter</filter-class>
          </filter>

          <filter>
               <filter-name>GZIP Compression Filter</filter-name>
               <filter-class>org.geoserver.filters.GZIPFilter</filter-class>
               <init-param>
                    <!-- The compressed-types parameter is a comma-separated list of regular expressions.
                         If a mime type matches any of the regular expressions then it will be compressed.
                         -->
                    <param-name>compressed-types</param-name>
                    <param-value>text/.*,.*xml.*,application/json,application/x-javascript</param-value>
               </init-param>
          </filter>

          <filter>
               <filter-name>Advanced Dispatch Filter</filter-name>
               <filter-class>org.geoserver.platform.AdvancedDispatchFilter</filter-class>
               <!--
               This filter allows for a single mapping to the spring dispatcher. However using /* as a mapping
               in a servlet mapping causes the servlet path to be "/" of the request. This causes problems with
               library like wicket and restlet. So this filter fakes the servlet path by assuming the first
               component of the path is the mapped path.
               -->
          </filter>

          <filter>
               <filter-name>Spring Delegating Filter</filter-name>
               <filter-class>org.geoserver.filters.SpringDelegatingFilter</filter-class>
               <!--
               This filter allows for filters to be loaded via spring rather than
               registered here in web.xml.  One thing to note is that for such filters
               init() is not called. INstead any initialization is performed via spring
               ioc.
               -->
          </filter>

          <filter>
               <filter-name>Thread locals cleanup filter</filter-name>
               <filter-class>org.geoserver.filters.ThreadLocalsCleanupFilter</filter-class>
               <!--
               This filter cleans up thread locals Geotools is setting up for concurrency and performance
               reasons
               -->
          </filter>

          <!-- Uncomment following filter to enable CORS in Jetty. Do not forget the second config block further down. -->
          <!--    
          <filter>
               <filter-name>cross-origin</filter-name>
               <filter-class>org.eclipse.jetty.servlets.CrossOriginFilter</filter-class>
               <init-param>
               <param-name>chainPreflight</param-name>
               <param-value>false</param-value>
               </init-param>
               <init-param>
               <param-name>allowedOrigins</param-name>
               <param-value>*</param-value>
               </init-param>
               <init-param>
               <param-name>allowedMethods</param-name>
               <param-value>GET,POST,PUT,DELETE,HEAD,OPTIONS</param-value>
               </init-param>
               <init-param>
               <param-name>allowedHeaders</param-name>
               <param-value>*</param-value>
               </init-param>
               </filter>
               -->

          <!-- Uncomment following filter to enable CORS in Tomcat. Do not forget the second config block further down. -->    
          <filter>
               <filter-name>cross-origin</filter-name>
               <filter-class>org.apache.catalina.filters.CorsFilter</filter-class>
               <init-param>
               <param-name>cors.allowed.origins</param-name>
               <param-value>*</param-value>
               </init-param>
               <init-param>
               <param-name>cors.allowed.methods</param-name>
               <param-value>GET,POST,PUT,DELETE,HEAD,OPTIONS</param-value>
               </init-param>
               <init-param>
               <param-name>cors.allowed.headers</param-name>
               <param-value>*</param-value>
               </init-param>
          </filter>

          <!--
               THIS FILTER MAPPING MUST BE THE FIRST ONE, otherwise we end up with ruined chars in the input from the GUI
               See the "Note" in the Tomcat character encoding guide:
               http://wiki.apache.org/tomcat/FAQ/CharacterEncoding
          -->
          <filter-mapping>
               <filter-name>Set Character Encoding</filter-name>
               <url-pattern>/*</url-pattern>
          </filter-mapping>

          <!-- Uncomment following filter-mapping to enable CORS -->
          <filter-mapping>
               <filter-name>cross-origin</filter-name>
               <url-pattern>/*</url-pattern>
          </filter-mapping>

          <filter-mapping>
               <filter-name>FlushSafeFilter</filter-name>
               <url-pattern>/*</url-pattern>
          </filter-mapping>

          <filter-mapping>
               <filter-name>SessionDebugger</filter-name>
               <url-pattern>/*</url-pattern>
          </filter-mapping>

          <filter-mapping>
               <filter-name>GZIP Compression Filter</filter-name>
               <url-pattern>/*</url-pattern>
          </filter-mapping>

          <filter-mapping>
               <filter-name>xFrameOptionsFilter</filter-name>
               <url-pattern>/*</url-pattern>
          </filter-mapping>

          <!--
               If you want to use your security system comment out this one too
          -->
          <filter-mapping>
               <filter-name>filterChainProxy</filter-name>
               <url-pattern>/*</url-pattern>
          </filter-mapping>

          <filter-mapping>
               <filter-name>Advanced Dispatch Filter</filter-name>
               <url-pattern>/*</url-pattern>
          </filter-mapping>

          <filter-mapping>
               <filter-name>Spring Delegating Filter</filter-name>
               <url-pattern>/*</url-pattern>
          </filter-mapping>

          <filter-mapping>
               <filter-name>Thread locals cleanup filter</filter-name>
               <url-pattern>/*</url-pattern>
          </filter-mapping>

          <!-- general initializer, should be first thing to execute -->
          <listener>
               <listener-class>org.geoserver.GeoserverInitStartupListener</listener-class>
          </listener>

          <!-- logging initializer, should execute before spring context startup -->
          <listener>
               <listener-class>org.geoserver.logging.LoggingStartupContextListener</listener-class>
          </listener>

          <!--  spring context loader -->
          <listener>
               <listener-class>org.geoserver.platform.GeoServerContextLoaderListener</listener-class>
          </listener>

          <!--  http session listener proxy -->
          <listener>
               <listener-class>org.geoserver.platform.GeoServerHttpSessionListenerProxy</listener-class>
          </listener>

          <!-- request context listener for session-scoped beans -->
          <listener>
               <listener-class>org.springframework.web.context.request.RequestContextListener</listener-class>
          </listener>

          <!-- spring dispatcher servlet, dispatches all incoming requests -->
          <servlet>
               <servlet-name>dispatcher</servlet-name>
               <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
          </servlet>

          <!-- single mapping to spring, this only works properly if the advanced dispatch filter is
               active -->
          <servlet-mapping>
               <servlet-name>dispatcher</servlet-name>
               <url-pattern>/*</url-pattern>
          </servlet-mapping>

          <session-config>
               <cookie-config>
                    <http-only>true</http-only>
                    <!-- The Secure flag should be set on session cookies but is commented out by default since it -->
                    <!-- will break non-HTTPS web UI access and may cause problems with some proxy configurations. -->
                    <!-- Uncomment the following line to add the Secure flag to session cookies. -->
                    <!-- <secure>true</secure> -->
               </cookie-config>
               <tracking-mode>COOKIE</tracking-mode>
          </session-config>

          <mime-mapping>
               <extension>xsl</extension>
               <mime-type>text/xml</mime-type>
          </mime-mapping>
          <mime-mapping>
               <extension>sld</extension>
               <mime-type>text/xml</mime-type>
          </mime-mapping>
          <mime-mapping>
               <extension>json</extension>
               <mime-type>application/json</mime-type>
          </mime-mapping>
          <mime-mapping>
               <extension>yaml</extension>
               <mime-type>text/plain</mime-type>
          </mime-mapping>

          <welcome-file-list>
               <welcome-file>index.html</welcome-file>
          </welcome-file-list>
     </web-app>
     
